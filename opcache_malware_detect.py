#!/usr/bin/env python

from opcache_disassembler import OPcacheDisassembler
import sys
import os
import re
from termcolor import colored

dangerous_keywords = [
    "(eval)",
    "(exec)",
    "(preg_replace).*(?=SEND_VAL\(.*/e.*\);)",
    "(system)",
    "(assert)",
    "(str_rot13)",
    "(base64_encode)"
]

def show_help():
    """ Show the help menu"""

    print "Usage : {0} [file|directory]".format(sys.argv[0])

def check_dangerous_keywords(ast, disassembler):
    """ Check for dangerous keywords

        Arguments :
            ast : The AST to check against
            disassembler : The disassembler to use
    """

    main_op_array = disassembler.convert_branch_to_pseudo_code(ast, "main_op_array")
    function_table = disassembler.convert_branch_to_pseudo_code(ast, "function_table")
    class_table = disassembler.convert_branch_to_pseudo_code(ast, "class_table")

    code = main_op_array + function_table + class_table

    for keyword in dangerous_keywords:
        result = re.search(keyword, code, re.DOTALL)
        if result:
            print colored("\tFound potentially dangerous keyword '{0}'.".format(result.group(1)), 'yellow')

if __name__ == "__main__":

    if len(sys.argv) < 2:
        show_help()
        exit(0)

    path = sys.argv[1]

    # Create a disassembler
    disassembler = OPcacheDisassembler()

    # Check if arg[1] is a folder or a file
    if os.path.isdir(path):

        # Iterate through all the files of the folder
        for subdir, dirs, files in os.walk(path):
            for file in files:

                # Only check .php.bin files
                if file.endswith(".php.bin"):
                    file = os.path.join(subdir, file)

                    print "Checking " + file

                    try:
                        # Create an AST from the compiled file
                        ast = disassembler.create_ast(file)
                    except KeyboardInterrupt:
                        exit(0)

                    except:
                        print "Unable to parse file " + file
                        continue

                    # Check the ast for dangerous keywords
                    check_dangerous_keywords(ast, disassembler)

    else:
        # Only check .php.bin files
        if path.endswith(".php.bin"):

            print "Checking " + path
            try:
                # Create an AST from the compiled file
                ast = disassembler.create_ast(path)
            except:
                print "Unable to parse file " + path
                exit(0)

            # Check AST for dangerous files
            check_dangerous_keywords(ast, disassembler)
        else:
            print "File is not a .php.bin file"



