#!/usr/bin/env python2

# Copyright (c) 2016 GoSecure Inc.

from opcache_disassembler import OPcacheDisassembler
from opcache_parser import OPcacheParser
import sys
import os
import subprocess
import shutil
import difflib
import time

hunt_source_files = "hunt_source_files.tmp"
hunt_ini          = "hunt.ini"
hunt_opcache      = "hunt_opcache"
hunt_report       = "hunt_report" + "_" + str(int(time.time()))

def list_opcache_files(path):
    """ List every opcache (.php.bin) file found in a given path """

    opcache_files = []

    # Check if arg[1] is a folder or a file
    if os.path.isdir(path):

        # Iterate through all the files of the folder
        for subdir, dirs, files in os.walk(path):
            for file in files:

                # Only check .php.bin files
                if file.endswith(".php.bin"):
                    file = os.path.join(subdir, file)
                    opcache_files += [file]

    else:
        # Only check .php.bin files
        if path.endswith(".php.bin"):
          opcache_files += [path]

    return opcache_files

def dump_source_file_list(list):

    with open(hunt_source_files, 'w') as f:
        for file in list:
            f.write(file + "\n")

def setup_env(phpini_path):

    # hunt.ini
    with open(phpini_path, "r") as f:
        with open(hunt_ini, "w") as h:
            for line in f.readlines():

                # opcache.file_cache
                if "opcache.file_cache=" in line:
                    line = "opcache.file_cache=" + os.path.join(os.getcwd(), hunt_opcache)

                # opcache.enable_cli
                if "opcache.enable_cli=" in line:
                    line = "opcache.enable_cli=1"

                # opcache.enable_cli
                if "opcache.enable=" in line:
                    line = "opcache.enable=1"

                if "opcache.file_cache_only=" in line:
                    line = "opcache.file_cache_only=0"

                h.write(line)

    # cache folder location
    os.mkdir(hunt_opcache)
    os.chmod(hunt_opcache, 0o777)

    # report folder
    os.mkdir(hunt_report)

def cleanup():

    # Remove cache folder
    try:
        shutil.rmtree(hunt_opcache)
    except:
        pass

    # Remove hunt.ini
    try:
        os.remove(hunt_ini)
    except:
        pass

    # Remove source files list
    try:
        os.remove(hunt_source_files)
    except:
        pass

def compile_source_files():
    command = "php -c {0} compile.php {1}".format(hunt_ini, hunt_source_files)
    subprocess.call(command.split(), shell=False)

def parse_file(file):
    return OPcacheParser(file)


def get_literals(parsed_literals):

    literals = []

    for f in parsed_literals:
        if f.u1.type == 6:
            string = f.string.val
            if string.startswith("\x00"):
                literals += [string[1:-10]] # Trim address from literal

        if f.u1.type == 4:
            literals += [f.value.w1]

    return literals

def get_opcodes(parsed_opcodes):
    return [f.opcode for f in parsed_opcodes]

def get_function(parsed_function):
    function_name = parsed_function['function_name']['value']['val']
    opcodes = get_opcodes(parsed_function['opcodes'])
    literals = get_literals(parsed_function['literals'])

    return {function_name : { 'opcodes' : opcodes, 'literals' : literals }}

def get_class(parsed_class):

    if not parsed_class:
        return {}

    classname = parsed_class['name']['value']['val']

    parsed_functions = [f['val']['op_array'] for f in parsed_class['function_table']['buckets']]
    functions = []
    for function in parsed_functions:
        functions += [get_function(function)]

    return { classname : {'functions' : functions}}


def compare_parsed_files(file1, file2):

    # Main OP array
    opcodes_1 = get_opcodes(file1['script']['main_op_array']['opcodes'])
    opcodes_2 = get_opcodes(file2['script']['main_op_array']['opcodes'])
    literals_1 = get_literals(file1['script']['main_op_array']['literals'])
    literals_2 = get_literals(file2['script']['main_op_array']['literals'])

    main_op_array_1 = { 'opcodes' : opcodes_1, 'literals' : literals_1 }
    main_op_array_2 = { 'opcodes' : opcodes_2, 'literals' : literals_2 }

    # Function OPcodes
    functions_1 = {}
    functions_2 = {}

    # Functions of file 1
    functions = [f['val']['op_array'] for f in file1['script']['function_table']['buckets']]
    for function in functions:
        functions_1.update(get_function(function))

    # Functions of file 2
    functions = [f['val']['op_array'] for f in file2['script']['function_table']['buckets']]
    for function in functions:
        functions_2.update(get_function(function))

    # Class OPcodes
    classes_1 = {}
    classes_2 = {}

    # Classes of file 1
    classes = [f['val']['class'] for f in file1['script']['class_table']['buckets']]
    for class_ in classes:
        classes_1.update(get_class(class_))

    # Classes of file 2
    classes = [f['val']['class'] for f in file2['script']['class_table']['buckets']]
    for class_ in classes:
        classes_2.update(get_class(class_))

    # OPcodes
    if main_op_array_1 != main_op_array_2:
        return False

    # Functions
    if functions_1 != functions_2:
        return False

    # Classes
    if classes_1 != classes_2:
        return False

    return True

def create_diff_report(file1, file2, report_name, from_desc, to_desc):
    disassembled_1 = OPcacheDisassembler().disassemble(file1).split("\n")
    disassembled_2 = OPcacheDisassembler().disassemble(file2).split("\n")
    html_differ = difflib.HtmlDiff()

    report_name = report_name.replace("/", "%2f") + '.html'
    with open(hunt_report + "/" + report_name, "w") as f:
        f.write(html_differ.make_file(disassembled_1, disassembled_2, from_desc, to_desc))

    return report_name

def create_index(report_names):
    header = """
    <html>
        <head>
            <title>OPcache Malware Hunt Report</title>
        </head>
        <body>
            <h1>Potentially infected files</h1>
    """
    body = "<ul>"
    for report_name in report_names:
        link = report_name.replace("%2f", "%252f")
        link_name = report_name.replace("%2f", "/")[:-5]
        body += "<li><a href='{0}'>{1}</a></li>".format(link, link_name)
    body += "</ul>"
    footer = """
        </body>
    </html>
    """
    with open(hunt_report + "/" + "index.html", "w") as f:
        f.write(header + body + footer)

def show_help():
    """ Show the help menu"""

    print "Usage : {0} [opcache_folder] [system_id] [php.ini] ".format(sys.argv[0])

if __name__ == "__main__":

    if len(sys.argv) < 3:
        show_help()
        exit(0)

    # Remove temporary files and folders
    cleanup()

    # Paths to analyse
    opcache_folder = sys.argv[1]
    system_id = sys.argv[2]
    phpini_path = sys.argv[3]

    # Setup a new phpini for compilation
    setup_env(phpini_path)

    # OPcache file list
    opcache_files = list_opcache_files(opcache_folder)

    # Get location of source folder
    prefix = os.path.commonprefix(opcache_files)
    source_folder = prefix.split(system_id, 1)[1]

    # Source files list
    if len(opcache_files) > 1:
        source_files = [source_folder + file.split(source_folder)[-1][:-4] for file in opcache_files ]
    else:
        source_files = [source_folder[:-4]]

    # Dump source files
    dump_source_file_list(source_files)

    # Compile source files
    compile_source_files()

    # Compare original cache files with new ones
    flagged_files = []
    for idx, file in enumerate(opcache_files):
        new_cache_file = os.path.join(hunt_opcache, system_id)
        new_cache_file += os.path.join(new_cache_file, source_files[idx])
        new_cache_file += ".bin"

        # Parse files
        print "Parsing " + file
        original_file = parse_file(file)

        print "Parsing " + new_cache_file
        new_parsed = parse_file(new_cache_file)

        # Compare files
        if not compare_parsed_files(original_file, new_parsed):
            flagged_files += [(idx, file, new_cache_file)]

    if flagged_files:
        print "Potentially infected files : "
        reports = []
        for idx, file, new_cache_file in flagged_files:
            print " - " + file

            report = create_diff_report(new_cache_file, file, source_files[idx], "Source Code", "Cache")
            reports += [report]

        create_index(reports)
    else:
        print "No infected files found."

    # Remove temporary files and folders
    cleanup()
